services:
  backend-db:
    image: postgres:alpine
    ports:
      - ${TOKENGRAM_DB_HOST_PORT:-5010}:5432
    networks:
      - tokengram
    environment:
      POSTGRES_PASSWORD: tokengram
    volumes:
      - tokengram-backend_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 1s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile.local
    container_name: tokengram-backend
    image: tokengram-backend
    ports:
      - ${TOKENGRAM_BACKEND_HOST_PORT:-5000}:5000
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    volumes:
      - tokengram-backend_keys:/etc/team07/tokengram/backend/data-protection-keys
      - tokengram-backend_uploads:/var/tokengram/uploads/public
      - ./appsettings.json:/app/appsettings.json:ro
      - ./appsettings.Development.json:/app/appsettings.Development.json:ro
    networks:
      - tokengram
    depends_on:
      backend-db:
        condition: service_healthy

volumes:
  tokengram-backend_db:
    name: tokengram-backend_db
  tokengram-backend_keys:
    name: tokengram-backend_keys
  tokengram-backend_uploads:
    name: tokengram-backend_uploads

networks:
  tokengram:
